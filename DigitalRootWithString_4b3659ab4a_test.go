// Test generated by RoostGPT for test roost-test using AI Type Open Source AI and AI Model meta-llama/Llama-2-13b-chat



package digital_root_test

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestDigitalRootWithString(t *testing.T) {
	tests := []struct {
		name     string
		input    int
		expected int
	}{
		{"one", 1, 1},
		{"23", 23, 7},
		{"456", 456, 9},
		{"0", 0, 0},
		{"-1", -1, -1},
		{" ABC ", 3, 3}, // todo: handle invalid input
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := DigitalRootWithString(tt.input)
			assert.Equal(t, tt.expected, result)
		})
	}
}

func TestDigitalRootWithStringEdgeCases(t *testing.T) {
	cases := map[int]bool{
		0: true,
		1: true,
		-1: true,
		len(" "): false, // todo: handle empty string
	}

	for input, expected := range cases {
		t.Run(fmt.Sprintf("%d", input), func(t *testing.T) {
			result := DigitalRootWithString(input)
			assert.Equalf(t, expected, result)
		})
	}
}

func TestDigitalRootWithStringRecursion(t *testing.T) {
	const maxDepth = 5
	depth := 0
	num := 123456789

	for i := 0; i < maxDepth; i++ {
		num = DigitalRootWithString(num)
		depth++
		if depth > maxDepth {
			break
		}
	}

	assert.Greater(t, depth, 0)
	assert.Equal(t, num, 9)
}