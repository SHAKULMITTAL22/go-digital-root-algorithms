// Test generated by RoostGPT for test roost-test using AI Type Open AI and AI Model gpt-4

package main

import (
	"strconv"
	"testing"
)

func TestDigitalRootWithString_4b3659ab4a(t *testing.T) {
	t.Run("Test with a single digit number", func(t *testing.T) {
		result := DigitalRootWithString(9)
		if result != 9 {
			t.Errorf("Expected 9, but got %d", result)
		}
	})

	t.Run("Test with a two digit number", func(t *testing.T) {
		result := DigitalRootWithString(18)
		if result != 9 {
			t.Errorf("Expected 9, but got %d", result)
		}
	})

	t.Run("Test with a large number", func(t *testing.T) {
		result := DigitalRootWithString(1234567890)
		if result != 9 {
			t.Errorf("Expected 9, but got %d", result)
		}
	})

	t.Run("Test with zero", func(t *testing.T) {
		result := DigitalRootWithString(0)
		if result != 0 {
			t.Errorf("Expected 0, but got %d", result)
		}
	})

	t.Run("Test with negative number", func(t *testing.T) {
		result := DigitalRootWithString(-123)
		if result != -6 {
			t.Errorf("Expected -6, but got %d", result)
		}
	})
}

func DigitalRootWithString(number int) int {
	if number < 0 {
		s := strconv.Itoa(number * -1)
		var sum, digit int
		for _, c := range s {
			digit, _ = strconv.Atoi(string(c))
			sum = sum + digit
		}
		return DigitalRootWithString(sum) * -1
	}

	s := strconv.Itoa(number)
	if len(s) == 1 {
		return number
	}
	var sum, digit int
	for _, c := range s {
		digit, _ = strconv.Atoi(string(c))
		sum = sum + digit
	}
	return DigitalRootWithString(sum)
}
